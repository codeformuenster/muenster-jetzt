version: '3'

services:
  frontend:
    # Uncomment the next line to use a non-root user for all processes. You can also
    # simply use the "remoteUser" property in devcontainer.json if you just want VS Code
    # and its sub-processes (terminals, tasks, debugging) to execute as the user. On Linux,
    # you may need to update USER_UID and USER_GID in .devcontainer/Dockerfile to match your
    # user if not 1000. See https://aka.ms/vscode-remote/containers/non-root for details.
    # user: node
    build:
      context: .
      dockerfile: ./frontend/.devcontainer/Dockerfile
      args:
        VARIANT: 14
    volumes:
      - .:/workspace:cached
    # Overrides default command so things don't shut down after the process ends.
    command: sleep infinity
    links:
      - backend
  backend:
    # Uncomment the next line to use a non-root user for all processes. You can also
    # simply use the "remoteUser" property in devcontainer.json if you just want
    # VS Code and its sub-processes (terminals, tasks, debugging) to execute as the user
    # On Linux, you may need to update the args USER_UID and USER_GID the "build" section
    # to match your user if not 1000. See https://aka.ms/vscode-remote/containers/non-root for details.
    # user: vscode
    build:
      context: ./backend
      dockerfile: ./.devcontainer/Dockerfile
      args:
        #
        VARIANT: 3
        USER_UID: 1000
        USER_GID: 1000
    volumes:
      - .:/workspace:cached
    # Overrides default command so things don't shut down after the process ends.
    command: sleep infinity
    links:
      - db
    environment:
      - DB_USER
      - DB_PASSWORD
      - DB_NAME
      - DB_HOST
      - DB_PORT

  db:
    image: postgres:12
    restart: unless-stopped
    ports:
      - 5432:5432
    env_file: ./backend/.env
