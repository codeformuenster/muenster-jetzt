/* Generated by restful-react */

import React from "react";
import { Get, GetProps, useGet, UseGetProps } from "restful-react";

export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;

export interface HTTPValidationError {
  detail?: ValidationError[];
}

export interface ValidationError {
  loc: string[];
  msg: string;
  type: string;
}

export interface RootGetResponse {}

export type RootGetProps = Omit<
  GetProps<RootGetResponse, unknown, void, void>,
  "path"
>;

/**
 * Root
 */
export const RootGet = (props: RootGetProps) => (
  <Get<RootGetResponse, unknown, void, void> path={`/`} {...props} />
);

export type UseRootGetProps = Omit<
  UseGetProps<RootGetResponse, unknown, void, void>,
  "path"
>;

/**
 * Root
 */
export const useRootGet = (props: UseRootGetProps) =>
  useGet<RootGetResponse, unknown, void, void>(`/`, props);

export interface EventsEventsGetResponse {}

export interface EventsEventsGetQueryParams {
  min_date?: string;
  max_date?: string;
  page?: number;
  limit?: number;
}

export type EventsEventsGetProps = Omit<
  GetProps<
    EventsEventsGetResponse,
    HTTPValidationError,
    EventsEventsGetQueryParams,
    void
  >,
  "path"
>;

/**
 * Events
 */
export const EventsEventsGet = (props: EventsEventsGetProps) => (
  <Get<
    EventsEventsGetResponse,
    HTTPValidationError,
    EventsEventsGetQueryParams,
    void
  >
    path={`/events`}
    {...props}
  />
);

export type UseEventsEventsGetProps = Omit<
  UseGetProps<
    EventsEventsGetResponse,
    HTTPValidationError,
    EventsEventsGetQueryParams,
    void
  >,
  "path"
>;

/**
 * Events
 */
export const useEventsEventsGet = (props: UseEventsEventsGetProps) =>
  useGet<
    EventsEventsGetResponse,
    HTTPValidationError,
    EventsEventsGetQueryParams,
    void
  >(`/events`, props);
