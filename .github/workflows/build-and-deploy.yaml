name: Build and deploy

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  backend:
    name: Build backend
    runs-on: ubuntu-18.04
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '2' # for comparison

      - name: Determine if job is required
        id: git-diff
        continue-on-error: true
        run: |
          echo "##[set-output name=changes;]$(git diff --name-only HEAD^1 -- . | wc -l)"

      - name: Install python 3.8
        if: steps.git-diff.outputs.changes != '0'
        uses: actions/setup-python@v2
        with:
          python-version: '3.8.x'

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: Cache python dependencies
        if: steps.git-diff.outputs.changes != '0'
        uses: actions/cache@v2
        env:
          cache-name: cache-python-deps
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ env.cache-name }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.cache-name }}-
            ${{ runner.os }}-pip-

      - name: Install and execute 'tox'
        if: steps.git-diff.outputs.changes != '0'
        run: |
          pip install tox
          tox

      - name: Extract branch name and shortened commit sha
        if: steps.git-diff.outputs.changes != '0'
        id: extract_branch
        run: |
          echo "##[set-output name=branch_name;]${GITHUB_REF##*/}"
          echo "##[set-output name=short_sha;]${GITHUB_SHA:0:7}"

      - name: Build backend container image (and push to Docker Hub on master branch)
        if: steps.git-diff.outputs.changes != '0'
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_PASS }}
          repository: codeformuenster/muenster-jetzt-api
          dockerfile: backend/deployment/Dockerfile.prod
          tags: ${{ steps.extract_branch.outputs.branch_name }},${{ steps.extract_branch.outputs.branch_name }}-${{ steps.extract_branch.outputs.short_sha }}
          path: backend
          tag_with_ref: true
          push: ${{ github.event_name == 'push' }}

  frontend:
    name: Validate, test and build frontend
    runs-on: ubuntu-18.04
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '2' # for comparison

      - name: Determine if job is required
        id: git-diff
        continue-on-error: true
        run: |
          echo "##[set-output name=changes;]$(git diff --name-only HEAD^1 -- . | wc -l)"

      - name: Debug
        run: |
          echo "Number of changed files in frontend directory: '${{ steps.git-diff.outputs.changes }}'"

      - name: Install Node.js 14
        if: steps.git-diff.outputs.changes != '0'
        uses: actions/setup-node@v2.1.1
        with:
          node-version: 14

      - name: Cache node modules
        if: steps.git-diff.outputs.changes != '0'
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-

      - name: Run 'npm ci' to install frontend dependencies
        if: steps.git-diff.outputs.changes != '0'
        run: |
          npm ci

      - name: Check frontend code style
        if: steps.git-diff.outputs.changes != '0'
        run: |
          npm run lint

      - name: Run frontend tests
        if: steps.git-diff.outputs.changes != '0'
        run: |
          npm run test

      - name: Extract branch name and shortened commit sha
        if: steps.git-diff.outputs.changes != '0'
        id: extract_branch
        run: |
          echo "##[set-output name=branch_name;]${GITHUB_REF##*/}"
          echo "##[set-output name=short_sha;]${GITHUB_SHA:0:7}"

      - name: Build frontend
        if: steps.git-diff.outputs.changes != '0'
        run: |
          export REACT_APP_VERSION="${{ steps.extract_branch.outputs.branch_name }}-${{ steps.extract_branch.outputs.short_sha }}"
          npm run build

      - name: Build frontend container image (and push to Docker Hub on master branch)
        if: steps.git-diff.outputs.changes != '0'
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_PASS }}
          repository: codeformuenster/muenster-jetzt-frontend
          dockerfile: frontend/deployment/Dockerfile.prod
          tags: ${{ steps.extract_branch.outputs.branch_name }},${{ steps.extract_branch.outputs.branch_name }}-${{ steps.extract_branch.outputs.short_sha }}
          path: frontend
          tag_with_ref: true
          push: ${{ github.event_name == 'push' }}

  validate-compose:
    name: Validate deployment docker-compose
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2

      - name: Run docker-compose config
        run: |
          docker-compose -f deployment/docker-compose.yml config --quiet

  deploy:
    name: deploy to server
    runs-on: ubuntu-18.04
    needs:
      - backend
      - frontend
      - validate-compose
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2

      - name: Extract branch name
        id: extract_branch
        run: |
          echo "##[set-output name=branch_name;]${GITHUB_REF##*/}"

      - name: Copy docker-compose file to server
        uses: easingthemes/ssh-deploy@v2.1.4
        env:
            SSH_PRIVATE_KEY: ${{ secrets.SSH_DEPLOY_KEY }}
            # z = compress
            # v = verbose
            ARGS: "-zv"
            SOURCE: deployment/docker-compose.yml
            REMOTE_HOST: "staging.muenster-jetzt.de"
            REMOTE_USER: root
            TARGET: "/root/muenster-jetzt/staging/"

      - name: Run remote commands
        uses: appleboy/ssh-action@master
        with:
          host: "staging.muenster-jetzt.de"
          username: root
          key: ${{ secrets.SSH_DEPLOY_KEY }}
          script_stop: true
          script: |
            set -e
            cd muenster-jetzt/staging
            docker-compose pull
            docker-compose up --detach --remove-orphans
            docker-compose exec -T api python -m mj migrate
            docker image prune --all --force
